#!/bin/bash

set -e

# for jq
PATH=/usr/local/bin:$PATH

cd "${1}"

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

payload=$(mktemp /tmp/resource-in.XXXXXX)

# script gets payload piped in on stdin (see test/complex_metric.out for example)
cat > "${payload}" <&0

# if debug is set to true, we don't curl but only output body (for testing)
debug="$(jq -r '.source.debug // "false"' < "${payload}")"

pushgw_url="$(jq -r '.source.url' < "${payload}")"
job_from_source="$(jq -r '.source.job' < "${payload}")"
job_from_params="$(jq -r '.params.job' < "${payload}")"
metric="$(jq -r '.params.metric' < "${payload}")"
value="$(jq -r '.params.value' < "${payload}")"
labels="$(jq -r '.params.labels' < "${payload}")"

# if we have a job in the parameters, override job in source
job=""
if [[ $job_from_params == 'null' ]]; then job=$job_from_source; else job=$job_from_params; fi

# if we have a set of lables, flatten them into comma-separated string
if [[ ${labels} != 'null' ]]; then
    joined_labels=$(jq '.params.labels' < "${payload}" | jq -r 'keys[] as $k | "\($k)=\"\(.[$k])\""' | tr '\n' ' ' | sed -e 's/ /, /g' | sed -e 's/, $//g')
    metric="${metric}{${joined_labels}}"
fi

value_file="$(jq -r '.params.value_file' < "${payload}")" 
if [[ -f "$value_file" ]]; then
    value=$(head -n 1 "$value_file")
fi


body="${metric} ${value}"
body=$(echo ${body} | envsubst)

debug_info=""

# check whether we really want to send messages or just running tests (debug)
if [[ "${debug}" == "true" ]]; then
    debug_info="$(cat <<EOF
{
    "pushgw_url": "${pushgw_url}",
    "body": "${body//\"/\\\"}",
    "job": "${job}"
}
EOF
    )"
else
    echo "Metric sent to Pushgateway: '${body}'" >&2
    echo "${body}" | curl --data-binary @- "${pushgw_url}/metrics/job/${job}"
fi

timestamp="$(jq -n "{version:{timestamp:\"$(date +%s)\"}}")"

# send actual result to &3 since this is redirected to &1
echo "$timestamp $debug_info " | jq -s add  >&3
